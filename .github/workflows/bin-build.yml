name: 日常构建与发布

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
      - 'release-*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configuring nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
      
      - name: Installation of dependencies
        run: npm install
      
      - name: Get the current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Inject build date
        run: |
          $buildDate = "${{ steps.date.outputs.date }}"
          Get-ChildItem -Path src -Filter "*.js" -Recurse | ForEach-Object {
            $content = Get-Content $_.FullName -Raw
            
            # 只注入构建日期，保持便携模式为 false（用于安装版）
            if ($content -match "const APP_BUILD_DATE = '(\d+)'") {
              $content = $content -replace "const APP_BUILD_DATE = '(\d+)'", "const APP_BUILD_DATE = '$buildDate'"
              Set-Content $_.FullName $content
              Write-Host "Injected build date $buildDate into $($_.FullName)"
            }
          }
        shell: pwsh
      
      - name: Build MSI (Install version)
        run: |
          # 先构建安装版（保持 APP_IS_PORTABLE = 'false'）
          npm run build:webpack
          npx electron-builder --win msi
      
      - name: Reset portable flag and build portable version
        run: |
          # 为便携版注入便携模式标识
          $buildDate = "${{ steps.date.outputs.date }}"
          Get-ChildItem -Path src -Filter "*.js" -Recurse | ForEach-Object {
            $content = Get-Content $_.FullName -Raw
            $modified = $false
            
            # 重新注入构建日期
            if ($content -match "const APP_BUILD_DATE = '(\d+)'") {
              $content = $content -replace "const APP_BUILD_DATE = '(\d+)'", "const APP_BUILD_DATE = '$buildDate'"
              $modified = $true
            }
            
            # 为便携版注入便携模式标识
            if ($content -match "const APP_IS_PORTABLE = '(true|false)'") {
              $content = $content -replace "const APP_IS_PORTABLE = '(true|false)'", "const APP_IS_PORTABLE = 'true'"
              $modified = $true
            }
            
            if ($modified) {
              Set-Content $_.FullName $content
              Write-Host "Injected portable mode parameters into $($_.FullName)"
            }
          }
          
          $packageJsonPath = "package.json"
          $packageJson = Get-Content $packageJsonPath -Raw | ConvertFrom-Json
          $packageJson.build.asar = $false
          $packageJson | ConvertTo-Json -Depth 10 | Set-Content $packageJsonPath
          Write-Host "Disabled asar for portable build"
          
          # 重新构建 webpack 并构建便携版
          npm run build:webpack
          npx electron-builder --win portable
        shell: pwsh
      
      - name: List build directory contents
        run: |
          dir build
          echo "MSI files:"
          Get-ChildItem -Path build -Filter "*.msi" -Recurse
          echo "Portable files:"
          Get-ChildItem -Path build -Filter "*portable*.exe" -Recurse
        shell: pwsh
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-artifacts
          path: |
            build/*.msi
            build/*portable*.exe

  build-macos:
    runs-on: macos-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configuring nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
      
      - name: Installation of dependencies
        run: npm install
      
      - name: Get the current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Inject build date
        run: |
          buildDate="${{ steps.date.outputs.date }}"
          find src -type f -name "*.js" -print0 | xargs -0 grep -l "const APP_BUILD_DATE = '[0-9]\\{8\\}'" | while read file; do
            sed -i '' "s/const APP_BUILD_DATE = '[0-9]\{8\}'/const APP_BUILD_DATE = '$buildDate'/" "$file"
            echo "Injected build date $buildDate into $file"
          done
        shell: bash
      
      - name: Build Universal macOS App
        run: npm run build:mac-universal
      
      - name: List build directory contents
        run: |
          ls -la build
          echo "macOS DMG files:"
          find build -name "*.dmg" -type f
        shell: bash
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-artifacts
          path: build/*.dmg

  build-linux:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configuring nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
      
      - name: Installation of dependencies
        run: npm install
      
      - name: Get the current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Build DEB (Install version)
        run: |
          buildDate="${{ steps.date.outputs.date }}"
          find src -type f -name "*.js" -print0 | xargs -0 grep -l "const APP_BUILD_DATE = '[0-9]\\{8\\}'" | while read file; do
            sed -i "s/const APP_BUILD_DATE = '[0-9]\{8\}'/const APP_BUILD_DATE = '$buildDate'/" "$file"
            echo "Injected build date $buildDate into $file"
          done
          
          # 先构建安装版（DEB）
          npm run build:webpack
          npx electron-builder --linux deb
        shell: bash
      
      - name: Build AppImage (Portable version)
        run: |
          buildDate="${{ steps.date.outputs.date }}"
          
          # 为 AppImage 注入便携模式标识
          find src -type f -name "*.js" -print0 | xargs -0 grep -l "const APP_IS_PORTABLE = '[^']*'" | while read file; do
            sed -i "s/const APP_IS_PORTABLE = '[^']*'/const APP_IS_PORTABLE = 'true'/" "$file"
            echo "Injected portable mode flag into $file"
          done
          
          # 为便携版禁用 asar
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            packageJson.build.asar = false;
            fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
            console.log('Disabled asar for AppImage build');
          "
          
          # 重新构建 webpack 并构建 AppImage
          npm run build:webpack
          npx electron-builder --linux AppImage
        shell: bash
      

      
      - name: List build directory contents
        run: |
          ls -la build
          echo "Linux DEB files:"
          find build -name "*.deb" -type f
          echo "Linux AppImage files:"
          find build -name "*.AppImage" -type f
        shell: bash
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-artifacts
          path: |
            build/*.deb
            build/*.AppImage

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create artifacts directory
        run: mkdir -p artifacts
      
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build-artifacts
          path: artifacts/windows
      
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build-artifacts
          path: artifacts/macos
      
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-build-artifacts
          path: artifacts/linux
      
      - name: List downloaded artifacts
        run: |
          find artifacts -type f
      
      - name: Get the current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Get commit information
        id: commit_info
        run: |
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "commit_sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --pretty=%ci)" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Check if triggered by tag
        id: check_tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "is_tag=true" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "is_tag=false" >> $GITHUB_OUTPUT
            echo "tag_name=nightly-${{ steps.date.outputs.date }}" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Set release details (for non-tag builds)
        id: release_details
        if: steps.check_tag.outputs.is_tag != 'true'
        run: |
          echo "release_name=日常构建 ${{ steps.date.outputs.date }}" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "自动构建的日常版本 - ${{ steps.date.outputs.date }}" >> $GITHUB_OUTPUT
          echo "此版本基于最新的主分支代码自动构建，可能包含不稳定的功能。" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 构建信息 / Build Information" >> $GITHUB_OUTPUT
          echo "- **Commit:** [\`${{ steps.commit_info.outputs.commit_sha_short }}\`](https://github.com/sxueck/lvory/commit/${{ steps.commit_info.outputs.commit_sha }})" >> $GITHUB_OUTPUT
          echo "- **提交消息:** ${{ steps.commit_info.outputs.commit_message }}" >> $GITHUB_OUTPUT
          echo "- **提交者:** ${{ steps.commit_info.outputs.commit_author }}" >> $GITHUB_OUTPUT
          echo "- **提交时间:** ${{ steps.commit_info.outputs.commit_date }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 支持平台 / Supported Platforms" >> $GITHUB_OUTPUT
          echo "- Windows MSI (x64) - 安装版" >> $GITHUB_OUTPUT
          echo "- Windows Portable (x64) - 便携版" >> $GITHUB_OUTPUT
          echo "- macOS DMG (Universal Binary - 支持 Intel x64 和 Apple Silicon arm64)" >> $GITHUB_OUTPUT
          echo "- Linux DEB (x64 & arm64) - 安装版" >> $GITHUB_OUTPUT
          echo "- Linux AppImage (x64 & arm64) - 便携版" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Create a Release (for non-tag builds only)
        id: create_release
        if: steps.check_tag.outputs.is_tag != 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.check_tag.outputs.tag_name }}
          name: ${{ steps.release_details.outputs.release_name }}
          body: ${{ steps.release_details.outputs.release_body }}
          draft: false
          prerelease: ${{ steps.release_details.outputs.is_prerelease }}
          files: |
            artifacts/windows/*.msi
            artifacts/windows/*portable*.exe
            artifacts/macos/*.dmg
            artifacts/linux/*.deb
            artifacts/linux/*.AppImage
      
      - name: Upload build artifacts for tag builds
        if: steps.check_tag.outputs.is_tag == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: tag-build-${{ steps.check_tag.outputs.tag_name }}-artifacts
          path: |
            artifacts/windows/*.msi
            artifacts/windows/*portable*.exe
            artifacts/macos/*.dmg
            artifacts/linux/*.deb
            artifacts/linux/*.AppImage